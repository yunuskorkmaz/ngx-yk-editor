{"version":3,"sources":["ng://yk-editor/lib/ykeditor/ykeditor.component.ts","ng://yk-editor/lib/markdown.directive.ts","ng://yk-editor/lib/yk-editor.module.ts"],"names":["YKEditorComponent","EventEmitter","language","minimap","enabled","lineNumbers","theme","this","scrollBeyondLastLine","wordWrap","glyphMargin","Object","defineProperty","prototype","_content","v","contentChange","emit","changeTheme","editor","setTheme","changeLayout","type","displayMode","previewContainer","nativeElement","setAttribute","editorContainer","isFullScreen","mainContainer","baseEditor","layout","ngOnInit","_this","create","host","config","setModel","createModel","content","onDidChangeModelContent","e","getValue","emojilist","k","emoji","push","label","kind","languages","CompletionItemKind","Function","insertText","registerCompletionItemProvider","provideCompletionItems","model","position","getValueInRange","startLineNumber","lineNumber","startColumn","column","endLineNumber","endColumn","triggerCharacters","setLanguageConfiguration","onEnterRules","beforeText","action","appendText","indentAction","IndentAction","None","Keyword","value","Snippet","join","documentation","updateOptions","charRepeatBasedInsertText","char","aftercharnewLine","line","count","trim","length","selection","getSelection","text","getModel","beforeselection","Selection","selectionStartLineNumber","selectionStartColumn","positionLineNumber","positionColumn","afterselection","startchar","endchar","executeEdits","range","setSelection","focus","linkBasedInsertText","extrachar","newText","setPosition","listBasedInsertText","fill","extra","insertContent","trigger","onResized","event","Component","args","selector","template","Input","Output","ViewChild","MarkdownDirective","el","sanitize","render2","marked","Renderer","markedRenderer","renderMarkdown","markedContent","replace","match","emojify","bypassSecurityTrustHtml","innerHTML","SecurityContext","HTML","renderer","listitem","test","table","header","body","setOptions","highlight","code","hljs","highlightAuto","tables","smartLists","Directive","ElementRef","DomSanitizer","Renderer2","YkEditorModule","NgModule","imports","CommonModule","AngularResizedEventModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Component, OnInit, ViewChild, ElementRef, Input, Output, EventEmitter } from '@angular/core';\r\nimport { editor, Selection, languages} from 'monaco-editor';\r\nimport emoji from 'node-emoji'\r\nimport { ResizedEvent } from 'angular-resize-event/resized-event';\r\n\r\n@Component({\r\n  selector: 'yk-editor',\r\n  templateUrl: './ykeditor.component.html',\r\n  styleUrls: ['./ykeditor.component.css']\r\n})\r\nexport class YKEditorComponent implements OnInit {\r\n\r\n\r\n  @Input() get content() {\r\n    return this._content;\r\n  }\r\n\r\n  set content(v) {\r\n    this._content = v;\r\n    this.contentChange.emit(v);\r\n  }\r\n\r\n  @Output() contentChange = new EventEmitter();\r\n\r\n  _content = \"\";\r\n  @ViewChild(\"editorhost\") host: ElementRef;\r\n  @ViewChild(\"editorContainer\") editorContainer: ElementRef;\r\n  @ViewChild(\"previewContainer\") previewContainer: ElementRef;\r\n  @ViewChild('mainContainer') mainContainer: ElementRef;\r\n  baseEditor: any;\r\n\r\n  displayMode: string = \"split\";\r\n\r\n  isFullScreen = false;\r\n\r\n  theme: boolean = true;\r\n\r\n  changeTheme() {\r\n    this.theme = !this.theme;\r\n    this.theme == true ? editor.setTheme(\"vs\") : editor.setTheme(\"vs-dark\");\r\n  }\r\n\r\n  changeLayout(type) {\r\n    if (this.displayMode != type || type == \"fullscreen\") {\r\n      this.displayMode = type;\r\n      switch (type) {\r\n        case 'edit':\r\n          this.previewContainer.nativeElement.setAttribute(\"style\", \"display : none\");\r\n          this.editorContainer.nativeElement.setAttribute(\"style\", \"min-width : 100%;max-width : 100%\");\r\n          break;\r\n        case 'preview':\r\n          this.editorContainer.nativeElement.setAttribute(\"style\", \"display : none\");\r\n          this.previewContainer.nativeElement.setAttribute(\"style\", \"min-width : 100%;max-width : 100%\");\r\n          break;\r\n        case 'split':\r\n          this.previewContainer.nativeElement.setAttribute(\"style\", \"\");\r\n          this.editorContainer.nativeElement.setAttribute(\"style\", \"\");\r\n          break;\r\n        case 'fullscreen':\r\n\r\n          this.isFullScreen = !this.isFullScreen;\r\n          if (this.isFullScreen == true)\r\n            this.mainContainer.nativeElement.setAttribute('style', \"position: fixed;top: 0px;left: 0;bottom: 0;right: 0;width: 100%;height: 100%;\");\r\n          else\r\n            this.mainContainer.nativeElement.setAttribute('style', \"\");\r\n          break;\r\n      }\r\n      this.baseEditor.layout();\r\n    }\r\n  }\r\n\r\n\r\n  constructor() {\r\n    \r\n\r\n  }\r\n\r\n  config: any = {\r\n\r\n    language: \"markdown\",\r\n    minimap: { enabled: false },\r\n    lineNumbers: \"off\",\r\n    theme: this.theme ? 'vs' : 'vs-dark',\r\n    scrollBeyondLastLine: false,\r\n    wordWrap: 'on',\r\n    glyphMargin: false\r\n  }\r\n\r\n\r\n  ngOnInit() {\r\n    this.baseEditor = editor.create(this.host.nativeElement, this.config);\r\n    this.baseEditor.setModel(editor.createModel(this.content, 'markdown'));\r\n    this.baseEditor.onDidChangeModelContent((e) => {\r\n      this.content = this.baseEditor.getValue();\r\n    });\r\n    var emojilist = [];\r\n    for (var k in emoji.emoji) { emojilist.push({ label: k + \" \" + emoji.emoji[k], kind: languages.CompletionItemKind.Function, insertText: k + \":\" }) }\r\n\r\n    languages.registerCompletionItemProvider('markdown', {\r\n      provideCompletionItems: function (model, position) {\r\n        var textUntilPosition = model.getValueInRange({ startLineNumber: position.lineNumber, startColumn: position.column - 1, endLineNumber: position.lineNumber, endColumn: position.column });\r\n        if (textUntilPosition === ':') { return emojilist; } return [];\r\n      },\r\n      triggerCharacters: [':']\r\n    });\r\n\r\n    languages.setLanguageConfiguration('markdown', {\r\n      onEnterRules: [\r\n        {\r\n          beforeText: /^[-]\\s(.*)/,\r\n          action: { appendText: '- ', indentAction: languages.IndentAction.None }\r\n\r\n        }\r\n      ]\r\n    });\r\n    languages.registerCompletionItemProvider('markdown', {\r\n      provideCompletionItems: () => {\r\n        return [\r\n          {\r\n            label: 'h1',\r\n            kind: languages.CompletionItemKind.Keyword,\r\n            insertText: {\r\n              value: '# ${1:text}'\r\n            }\r\n          },\r\n          {\r\n            label: 'h2',\r\n            kind: languages.CompletionItemKind.Keyword,\r\n            insertText: {\r\n              value: '## ${1:text}'\r\n            }\r\n          },\r\n          {\r\n            label: 'h3',\r\n            kind: languages.CompletionItemKind.Keyword,\r\n            insertText: {\r\n              value: '### ${1:text}'\r\n            }\r\n          },\r\n          {\r\n            label: 'h4',\r\n            kind: languages.CompletionItemKind.Keyword,\r\n            insertText: {\r\n              value: '#### ${1:text}'\r\n            }\r\n          },\r\n          {\r\n            label: 'h5',\r\n            kind: languages.CompletionItemKind.Keyword,\r\n            insertText: {\r\n              value: '##### ${1:text}'\r\n            }\r\n          },\r\n          {\r\n            label: 'h6',\r\n            kind: languages.CompletionItemKind.Keyword,\r\n            insertText: {\r\n              value: '###### ${1:text}'\r\n            }\r\n          },\r\n          {\r\n            label: 'code',\r\n            kind: languages.CompletionItemKind.Snippet,\r\n            insertText: {\r\n              value: [\r\n                '```',\r\n                '${1:code}',\r\n                '```',\r\n\r\n              ].join('\\n')\r\n            },\r\n            documentation: 'If-Else Statement'\r\n          },\r\n          {\r\n            label: 'link',\r\n            kind: languages.CompletionItemKind.Keyword,\r\n            insertText: {\r\n              value: '[${1:linkText}](${2:url})'\r\n            }\r\n          },\r\n          {\r\n            label: 'image',\r\n            kind: languages.CompletionItemKind.Keyword,\r\n            insertText: {\r\n              value: '![${1:altText}](${2:url})'\r\n            }\r\n          },\r\n          {\r\n            label: 'linkreferance',\r\n            kind: languages.CompletionItemKind.Keyword,\r\n            insertText: {\r\n              value: '[${1:name}]: ${2:link}'\r\n            }\r\n          },\r\n          {\r\n            label: 'list',\r\n            kind: languages.CompletionItemKind.Keyword,\r\n            insertText: {\r\n              value: '\\n - ${1:text}'\r\n            }\r\n          },\r\n          {\r\n            label: 'todo un check',\r\n            kind: languages.CompletionItemKind.Keyword,\r\n            insertText: {\r\n              value: '\\n - [ ] ${2:text}'\r\n            }\r\n          },\r\n\r\n          {\r\n            label: 'todo check',\r\n            kind: languages.CompletionItemKind.Keyword,\r\n            insertText: {\r\n              value: '\\n - [x] ${2:text}'\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    });\r\n\r\n    this.baseEditor.updateOptions({\r\n      glyphMargin : false\r\n    });\r\n    \r\n  }\r\n\r\n  charRepeatBasedInsertText(char, aftercharnewLine = false, line = 0) {\r\n    var count = char.trim().length;\r\n    const selection = this.baseEditor.getSelection();\r\n    var text = this.baseEditor.getModel().getValueInRange(selection);\r\n    text.trim();\r\n    var beforeselection = new Selection(selection.selectionStartLineNumber,\r\n      selection.selectionStartColumn - count,\r\n      selection.positionLineNumber,\r\n      selection.positionColumn - text.length);\r\n\r\n    var afterselection = new Selection(selection.selectionStartLineNumber,\r\n      selection.positionColumn,\r\n      selection.positionLineNumber,\r\n      selection.positionColumn + count);\r\n\r\n    var startchar = this.baseEditor.getModel().getValueInRange(beforeselection);\r\n    var endchar = this.baseEditor.getModel().getValueInRange(afterselection);\r\n\r\n\r\n\r\n    if (startchar == char && endchar == char) {\r\n\r\n      this.baseEditor.executeEdits('', [{ range: afterselection, text: '' }]);\r\n      this.baseEditor.executeEdits('', [{ range: beforeselection, text: '' }]);\r\n\r\n    }\r\n    else {\r\n      text = `${aftercharnewLine == true ? '\\n' : ''}${char}${aftercharnewLine == true ? '\\n' : ''}${text}${aftercharnewLine == true ? '\\n' : ''}${char}`;\r\n      this.baseEditor.executeEdits('', [{ range: selection, text: text }]);\r\n\r\n      this.baseEditor.setSelection({\r\n        startColumn: selection.startColumn + (line == 0 ? count : 0),\r\n        endColumn: selection.endColumn + (line == 0 ? count : 0),\r\n        startLineNumber: selection.startLineNumber + line,\r\n        endLineNumber: selection.endLineNumber + line\r\n      });\r\n    }\r\n    this.baseEditor.focus();\r\n  }\r\n  linkBasedInsertText(type) {\r\n    var count = type == \"image\" ? 4 : 3;\r\n    var extrachar = type == \"image\" ? \"!\" : \"\";\r\n    const selection = this.baseEditor.getSelection();\r\n    var text = this.baseEditor.getModel().getValueInRange(selection);\r\n    var newText = `${extrachar}[${text}]()`;\r\n    this.baseEditor.executeEdits('', [{ range: selection, text: newText }]);\r\n    this.baseEditor.setPosition({\r\n      lineNumber: selection.endLineNumber,\r\n      column: selection.endColumn + count\r\n    });\r\n    this.baseEditor.focus();\r\n  }\r\n  listBasedInsertText(type, fill = false) {\r\n    var extra = type == 'todo' ? fill == true ? '[x]' : '[ ]' : '';\r\n    const selection = this.baseEditor.getSelection();\r\n    var text = this.baseEditor.getModel().getValueInRange(selection);\r\n    var newText = `\\n - ${extra} ${text} `;\r\n    this.baseEditor.executeEdits('', [{ range: selection, text: newText }]);\r\n    this.baseEditor.setPosition({\r\n      lineNumber: selection.endLineNumber + 1,\r\n      column: type == 'todo' ? 8 : 4\r\n    });\r\n    this.baseEditor.focus();\r\n  }\r\n\r\n  insertContent(type) {\r\n\r\n\r\n    switch (type) {\r\n      case 'bold':\r\n        this.charRepeatBasedInsertText(\"**\");\r\n        break;\r\n      case 'italic':\r\n        this.charRepeatBasedInsertText(\"*\");\r\n        break;\r\n      case 'strikethrough':\r\n        this.charRepeatBasedInsertText(\"~~\");\r\n        break;\r\n      case 'link':\r\n        this.linkBasedInsertText(\"link\");\r\n        break;\r\n      case 'image':\r\n        this.linkBasedInsertText(\"image\");\r\n        break;\r\n      case 'code':\r\n        this.charRepeatBasedInsertText('```', true, +1);\r\n        break;\r\n      case 'inline-code':\r\n        this.charRepeatBasedInsertText('`');\r\n        break;\r\n      case 'undo':\r\n        this.baseEditor.trigger(\"\", \"undo\", \"\");\r\n        break;\r\n      case 'redo':\r\n        this.baseEditor.trigger('', 'redo', '');\r\n        break;\r\n      case 'list':\r\n        this.listBasedInsertText('link');\r\n        break;\r\n      case 'todo-x':\r\n        this.listBasedInsertText('todo', true);\r\n        break;\r\n      case 'todo-o':\r\n        this.listBasedInsertText('todo', false);\r\n        break;\r\n    }\r\n  }\r\n\r\n  onResized(event: ResizedEvent): void {\r\n    this.baseEditor.layout();\r\n   }\r\n}\r\n","import { Directive, Input, ElementRef, Output, Renderer2, SecurityContext } from '@angular/core';\nimport marked from 'marked';\nimport hljs from \"highlight.js\";\nimport { DomSanitizer } from '@angular/platform-browser';\nimport emoji from 'node-emoji'\n\n\n@Directive({\n  selector: '[markdown]'\n})\nexport class MarkdownDirective {\n\n  @Input() set markdowntext(v) {\n    if (v != null && v != this._content) {\n      this._content = v;\n      this.renderMarkdown(this._content);\n    }\n  }\n  @Output() get html() {\n    return this.markedContent;\n  }\n  _content;\n  markedContent: string;\n  renderer = new marked.Renderer();\n\n\n  constructor(private el: ElementRef, private sanitize: DomSanitizer, private render2: Renderer2) {\n    this.markedRenderer();\n    this.renderMarkdown(\"\");\n  }\n\n\n  renderMarkdown(text) {\n    const replacer = (match) => emoji.emojify(match);\n    text = text.replace(/(:.*:)/g, replacer);\n\n    this.markedContent = marked(text);\n\n    this.markedContent = this.sanitize.bypassSecurityTrustHtml(this.markedContent) as string\n\n    this.el.nativeElement.innerHTML = this.sanitize.sanitize(SecurityContext.HTML, this.markedContent);\n\n  }\n\n  markedRenderer() {\n    this.renderer.listitem = (text: any) => {\n      if (/^\\s*\\[[x ]\\]\\s*/.test(text)) {\n        text = text\n          .replace(/^\\s*\\[ \\]\\s*/, '<i class=\"fa fa-square-o\" style=\"margin: 0 0.2em 0.25em -1.6em;\"></i> ')\n          .replace(/^\\s*\\[x\\]\\s*/, '<i class=\"fa fa-check-square\" style=\"margin: 0 0.2em 0.25em -1.6em;\"></i> ');\n        return `<li style=\"list-style: none;\">${text}</li>`;\n      } else {\n        return `<li>${text}</li>`;\n      }\n    };\n    this.renderer.table = (header: string, body: string) => {\n      return `<table class=\"table table-bordered\">\\n<thead>\\n${header}</thead>\\n<tbody>\\n${body}</tbody>\\n</table>\\n`;\n    };\n\n    marked.setOptions({\n      highlight: function (code) {\n        return hljs.highlightAuto(code).value;\n      },\n      renderer: this.renderer,\n      tables: true,\n      sanitize: false,\n      smartLists: true,\n\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { YKEditorComponent } from './ykeditor/ykeditor.component';\nimport { MarkdownDirective } from './markdown.directive';\nimport { CommonModule } from \"@angular/common\";\nimport { AngularResizedEventModule } from 'angular-resize-event';\n@NgModule({\n  imports: [\n    CommonModule,\n    AngularResizedEventModule\n  ],\n  declarations: [ YKEditorComponent, MarkdownDirective],\n  exports: [YKEditorComponent,MarkdownDirective]\n})\nexport class YkEditorModule { }\n"]}