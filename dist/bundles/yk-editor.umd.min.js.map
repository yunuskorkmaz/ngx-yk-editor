{"version":3,"sources":["ng://yk-editor/lib/ykeditor/ykeditor.component.ts","ng://yk-editor/lib/markdown.directive.ts","ng://yk-editor/lib/yk-editor.module.ts"],"names":["YKEditorComponent","el","this","EventEmitter","language","minimap","enabled","lineNumbers","theme","scrollBeyondLastLine","wordWrap","glyphMargin","Object","defineProperty","prototype","_content","v","contentChange","emit","changeTheme","editor","setTheme","changeLayout","type","displayMode","previewContainer","nativeElement","setAttribute","editorContainer","resizeLayout","isFullScreen","mainContainer","baseEditor","layout","ngOnInit","_this","create","host","config","setModel","createModel","content","onDidChangeModelContent","e","getValue","emojilist","k","emoji","push","label","kind","languages","CompletionItemKind","Function","insertText","registerCompletionItemProvider","provideCompletionItems","model","position","getValueInRange","startLineNumber","lineNumber","startColumn","column","endLineNumber","endColumn","triggerCharacters","setLanguageConfiguration","onEnterRules","beforeText","action","appendText","indentAction","IndentAction","None","Keyword","value","Snippet","join","documentation","updateOptions","charRepeatBasedInsertText","char","aftercharnewLine","line","count","trim","length","selection","getSelection","text","getModel","beforeselection","Selection","selectionStartLineNumber","selectionStartColumn","positionLineNumber","positionColumn","afterselection","startchar","endchar","executeEdits","range","setSelection","focus","linkBasedInsertText","extrachar","newText","setPosition","listBasedInsertText","fill","extra","insertContent","trigger","onResized","event","witdh","resizeContainer","offsetWidth","style","width","ngAfterViewInit","Component","args","selector","template","ElementRef","Input","Output","ViewChild","MarkdownDirective","sanitize","render2","marked","Renderer","markedRenderer","renderMarkdown","markedContent","replace","match","emojify","bypassSecurityTrustHtml","innerHTML","SecurityContext","HTML","renderer","listitem","test","table","header","body","setOptions","highlight","code","hljs","highlightAuto","tables","smartLists","Directive","DomSanitizer","Renderer2","YkEditorModule","NgModule","imports","CommonModule","AngularResizedEventModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Component, OnInit, ViewChild, ElementRef, Input, Output, EventEmitter, AfterViewInit, HostListener } from '@angular/core';\r\nimport { editor, Selection, languages} from 'monaco-editor';\r\nimport emoji from 'node-emoji'\r\nimport { ResizedEvent } from 'angular-resize-event/resized-event';\r\nimport { ResizedDirective } from 'angular-resize-event/resized.directive';\r\nimport { AngularResizedEventModule } from 'angular-resize-event';\r\n\r\n@Component({\r\n  selector: \"yk-editor\",\r\n  templateUrl: \"./ykeditor.component.html\",\r\n  styleUrls: [\"./ykeditor.component.css\"]\r\n})\r\nexport class YKEditorComponent implements OnInit, AfterViewInit {\r\n  @Input()\r\n  get content() {\r\n    return this._content;\r\n  }\r\n\r\n  set content(v) {\r\n    this._content = v;\r\n    this.contentChange.emit(v);\r\n  }\r\n\r\n  @Output() contentChange = new EventEmitter();\r\n\r\n  _content = \"\";\r\n  @ViewChild(\"editorhost\") host: ElementRef;\r\n  @ViewChild(\"editorContainer\") editorContainer: ElementRef;\r\n  @ViewChild(\"previewContainer\") previewContainer: ElementRef;\r\n  @ViewChild(\"mainContainer\") mainContainer: ElementRef;\r\n  @ViewChild(\"resizeContainer\") resizeContainer: ElementRef;\r\n  \r\n  baseEditor: any;\r\n\r\n  displayMode: string = \"split\";\r\n\r\n  isFullScreen = false;\r\n\r\n  theme: boolean = true;\r\n\r\n  changeTheme() {\r\n    this.theme = !this.theme;\r\n    this.theme == true ? editor.setTheme(\"vs\") : editor.setTheme(\"vs-dark\");\r\n  }\r\n\r\n  changeLayout(type) {\r\n    if (this.displayMode != type || type == \"fullscreen\") {\r\n      this.displayMode = type;\r\n      switch (type) {\r\n        case \"edit\":\r\n          this.previewContainer.nativeElement.setAttribute(\r\n            \"style\",\r\n            \"display : none\"\r\n          );\r\n          this.editorContainer.nativeElement.setAttribute(\r\n            \"style\",\r\n            \"min-width : 100%;max-width : 100%\"\r\n          );\r\n          break;\r\n        case \"preview\":\r\n          this.editorContainer.nativeElement.setAttribute(\r\n            \"style\",\r\n            \"display : none\"\r\n          );\r\n          this.previewContainer.nativeElement.setAttribute(\r\n            \"style\",\r\n            \"min-width : 100%;max-width : 100%\"\r\n          );\r\n          break;\r\n        case \"split\":\r\n          this.previewContainer.nativeElement.setAttribute(\"style\", \"\");\r\n          this.editorContainer.nativeElement.setAttribute(\"style\", \"\");\r\n          this.resizeLayout();\r\n          break;\r\n        case \"fullscreen\":\r\n          this.isFullScreen = !this.isFullScreen;\r\n          if (this.isFullScreen == true){\r\n            this.mainContainer.nativeElement.setAttribute(\r\n              \"style\",\r\n              \"position: fixed;top: 0px;left: 0;bottom: 0;right: 0;width: 100%;height: 100%;\"\r\n            );\r\n            this.resizeLayout();\r\n          }\r\n          else \r\n          {\r\n            this.mainContainer.nativeElement.setAttribute(\"style\", \"\");\r\n            this.resizeLayout();\r\n        }break;\r\n      }\r\n      this.baseEditor.layout();\r\n    }\r\n  }\r\n\r\n  constructor( private el : ElementRef) {}\r\n  \r\n\r\n  config: any = {\r\n    language: \"markdown\",\r\n    minimap: { enabled: false },\r\n    lineNumbers: \"off\",\r\n    theme: this.theme ? \"vs\" : \"vs-dark\",\r\n    scrollBeyondLastLine: false,\r\n    wordWrap: \"on\",\r\n    glyphMargin: false\r\n  };\r\n\r\n  ngOnInit() {\r\n    this.baseEditor = editor.create(this.host.nativeElement, this.config);\r\n    this.baseEditor.setModel(editor.createModel(this.content, \"markdown\"));\r\n    this.baseEditor.onDidChangeModelContent(e => {\r\n      this.content = this.baseEditor.getValue();\r\n    });\r\n    var emojilist = [];\r\n    for (var k in emoji.emoji) {\r\n      emojilist.push({\r\n        label: k + \" \" + emoji.emoji[k],\r\n        kind: languages.CompletionItemKind.Function,\r\n        insertText: k + \":\"\r\n      });\r\n    }\r\n\r\n    languages.registerCompletionItemProvider(\"markdown\", {\r\n      provideCompletionItems: function(model, position) {\r\n        var textUntilPosition = model.getValueInRange({\r\n          startLineNumber: position.lineNumber,\r\n          startColumn: position.column - 1,\r\n          endLineNumber: position.lineNumber,\r\n          endColumn: position.column\r\n        });\r\n        if (textUntilPosition === \":\") {\r\n          return emojilist;\r\n        }\r\n        return [];\r\n      },\r\n      triggerCharacters: [\":\"]\r\n    });\r\n\r\n    languages.setLanguageConfiguration(\"markdown\", {\r\n      onEnterRules: [\r\n        {\r\n          beforeText: /^[-]\\s(.*)/,\r\n          action: {\r\n            appendText: \"- \",\r\n            indentAction: languages.IndentAction.None\r\n          }\r\n        }\r\n      ]\r\n    });\r\n    languages.registerCompletionItemProvider(\"markdown\", {\r\n      provideCompletionItems: () => {\r\n        return [\r\n          {\r\n            label: \"h1\",\r\n            kind: languages.CompletionItemKind.Keyword,\r\n            insertText: {\r\n              value: \"# ${1:text}\"\r\n            }\r\n          },\r\n          {\r\n            label: \"h2\",\r\n            kind: languages.CompletionItemKind.Keyword,\r\n            insertText: {\r\n              value: \"## ${1:text}\"\r\n            }\r\n          },\r\n          {\r\n            label: \"h3\",\r\n            kind: languages.CompletionItemKind.Keyword,\r\n            insertText: {\r\n              value: \"### ${1:text}\"\r\n            }\r\n          },\r\n          {\r\n            label: \"h4\",\r\n            kind: languages.CompletionItemKind.Keyword,\r\n            insertText: {\r\n              value: \"#### ${1:text}\"\r\n            }\r\n          },\r\n          {\r\n            label: \"h5\",\r\n            kind: languages.CompletionItemKind.Keyword,\r\n            insertText: {\r\n              value: \"##### ${1:text}\"\r\n            }\r\n          },\r\n          {\r\n            label: \"h6\",\r\n            kind: languages.CompletionItemKind.Keyword,\r\n            insertText: {\r\n              value: \"###### ${1:text}\"\r\n            }\r\n          },\r\n          {\r\n            label: \"code\",\r\n            kind: languages.CompletionItemKind.Snippet,\r\n            insertText: {\r\n              value: [\"```\", \"${1:code}\", \"```\"].join(\"\\n\")\r\n            },\r\n            documentation: \"If-Else Statement\"\r\n          },\r\n          {\r\n            label: \"link\",\r\n            kind: languages.CompletionItemKind.Keyword,\r\n            insertText: {\r\n              value: \"[${1:linkText}](${2:url})\"\r\n            }\r\n          },\r\n          {\r\n            label: \"image\",\r\n            kind: languages.CompletionItemKind.Keyword,\r\n            insertText: {\r\n              value: \"![${1:altText}](${2:url})\"\r\n            }\r\n          },\r\n          {\r\n            label: \"linkreferance\",\r\n            kind: languages.CompletionItemKind.Keyword,\r\n            insertText: {\r\n              value: \"[${1:name}]: ${2:link}\"\r\n            }\r\n          },\r\n          {\r\n            label: \"list\",\r\n            kind: languages.CompletionItemKind.Keyword,\r\n            insertText: {\r\n              value: \"\\n - ${1:text}\"\r\n            }\r\n          },\r\n          {\r\n            label: \"todo un check\",\r\n            kind: languages.CompletionItemKind.Keyword,\r\n            insertText: {\r\n              value: \"\\n - [ ] ${2:text}\"\r\n            }\r\n          },\r\n\r\n          {\r\n            label: \"todo check\",\r\n            kind: languages.CompletionItemKind.Keyword,\r\n            insertText: {\r\n              value: \"\\n - [x] ${2:text}\"\r\n            }\r\n          }\r\n        ];\r\n      }\r\n    });\r\n\r\n    this.baseEditor.updateOptions({\r\n      glyphMargin: false\r\n    });\r\n  }\r\n\r\n  charRepeatBasedInsertText(char, aftercharnewLine = false, line = 0) {\r\n    var count = char.trim().length;\r\n    const selection = this.baseEditor.getSelection();\r\n    var text = this.baseEditor.getModel().getValueInRange(selection);\r\n    text.trim();\r\n    var beforeselection = new Selection(\r\n      selection.selectionStartLineNumber,\r\n      selection.selectionStartColumn - count,\r\n      selection.positionLineNumber,\r\n      selection.positionColumn - text.length\r\n    );\r\n\r\n    var afterselection = new Selection(\r\n      selection.selectionStartLineNumber,\r\n      selection.positionColumn,\r\n      selection.positionLineNumber,\r\n      selection.positionColumn + count\r\n    );\r\n\r\n    var startchar = this.baseEditor.getModel().getValueInRange(beforeselection);\r\n    var endchar = this.baseEditor.getModel().getValueInRange(afterselection);\r\n\r\n    if (startchar == char && endchar == char) {\r\n      this.baseEditor.executeEdits(\"\", [{ range: afterselection, text: \"\" }]);\r\n      this.baseEditor.executeEdits(\"\", [{ range: beforeselection, text: \"\" }]);\r\n    } else {\r\n      text = `${aftercharnewLine == true ? \"\\n\" : \"\"}${char}${\r\n        aftercharnewLine == true ? \"\\n\" : \"\"\r\n      }${text}${aftercharnewLine == true ? \"\\n\" : \"\"}${char}`;\r\n      this.baseEditor.executeEdits(\"\", [{ range: selection, text: text }]);\r\n\r\n      this.baseEditor.setSelection({\r\n        startColumn: selection.startColumn + (line == 0 ? count : 0),\r\n        endColumn: selection.endColumn + (line == 0 ? count : 0),\r\n        startLineNumber: selection.startLineNumber + line,\r\n        endLineNumber: selection.endLineNumber + line\r\n      });\r\n    }\r\n    this.baseEditor.focus();\r\n  }\r\n  linkBasedInsertText(type) {\r\n    var count = type == \"image\" ? 4 : 3;\r\n    var extrachar = type == \"image\" ? \"!\" : \"\";\r\n    const selection = this.baseEditor.getSelection();\r\n    var text = this.baseEditor.getModel().getValueInRange(selection);\r\n    var newText = `${extrachar}[${text}]()`;\r\n    this.baseEditor.executeEdits(\"\", [{ range: selection, text: newText }]);\r\n    this.baseEditor.setPosition({\r\n      lineNumber: selection.endLineNumber,\r\n      column: selection.endColumn + count\r\n    });\r\n    this.baseEditor.focus();\r\n  }\r\n  listBasedInsertText(type, fill = false) {\r\n    var extra = type == \"todo\" ? (fill == true ? \"[x]\" : \"[ ]\") : \"\";\r\n    const selection = this.baseEditor.getSelection();\r\n    var text = this.baseEditor.getModel().getValueInRange(selection);\r\n    var newText = `\\n - ${extra} ${text} `;\r\n    this.baseEditor.executeEdits(\"\", [{ range: selection, text: newText }]);\r\n    this.baseEditor.setPosition({\r\n      lineNumber: selection.endLineNumber + 1,\r\n      column: type == \"todo\" ? 8 : 4\r\n    });\r\n    this.baseEditor.focus();\r\n  }\r\n\r\n  insertContent(type) {\r\n    switch (type) {\r\n      case \"bold\":\r\n        this.charRepeatBasedInsertText(\"**\");\r\n        break;\r\n      case \"italic\":\r\n        this.charRepeatBasedInsertText(\"*\");\r\n        break;\r\n      case \"strikethrough\":\r\n        this.charRepeatBasedInsertText(\"~~\");\r\n        break;\r\n      case \"link\":\r\n        this.linkBasedInsertText(\"link\");\r\n        break;\r\n      case \"image\":\r\n        this.linkBasedInsertText(\"image\");\r\n        break;\r\n      case \"code\":\r\n        this.charRepeatBasedInsertText(\"```\", true, +1);\r\n        break;\r\n      case \"inline-code\":\r\n        this.charRepeatBasedInsertText(\"`\");\r\n        break;\r\n      case \"undo\":\r\n        this.baseEditor.trigger(\"\", \"undo\", \"\");\r\n        break;\r\n      case \"redo\":\r\n        this.baseEditor.trigger(\"\", \"redo\", \"\");\r\n        break;\r\n      case \"list\":\r\n        this.listBasedInsertText(\"link\");\r\n        break;\r\n      case \"todo-x\":\r\n        this.listBasedInsertText(\"todo\", true);\r\n        break;\r\n      case \"todo-o\":\r\n        this.listBasedInsertText(\"todo\", false);\r\n        break;\r\n    }\r\n  }\r\n\r\n  onResized(event: ResizedEvent): void {\r\n    this.baseEditor.layout();\r\n    this.resizeLayout();\r\n  }\r\n  resizeLayout() {\r\n    var witdh = this.resizeContainer.nativeElement.offsetWidth;\r\n    this.editorContainer.nativeElement.style.width = witdh / 2 + \"px\";\r\n    this.previewContainer.nativeElement.style.width = witdh / 2 + \"px\";\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.resizeLayout();\r\n  }\r\n}\r\n","import { Directive, Input, ElementRef, Output, Renderer2, SecurityContext } from '@angular/core';\nimport marked from 'marked';\nimport hljs from \"highlight.js\";\nimport { DomSanitizer } from '@angular/platform-browser';\nimport emoji from 'node-emoji'\n\n\n@Directive({\n  selector: '[markdown]'\n})\nexport class MarkdownDirective {\n\n  @Input() set markdowntext(v) {\n    if (v != null && v != this._content) {\n      this._content = v;\n      this.renderMarkdown(this._content);\n    }\n  }\n  @Output() get html() {\n    return this.markedContent;\n  }\n  _content;\n  markedContent: string;\n  renderer = new marked.Renderer();\n\n\n  constructor(private el: ElementRef, private sanitize: DomSanitizer, private render2: Renderer2) {\n    this.markedRenderer();\n    this.renderMarkdown(\"\");\n  }\n\n\n  renderMarkdown(text) {\n    const replacer = (match) => emoji.emojify(match);\n    text = text.replace(/(:.*:)/g, replacer);\n\n    this.markedContent = marked(text);\n\n    this.markedContent = this.sanitize.bypassSecurityTrustHtml(this.markedContent) as string\n\n    this.el.nativeElement.innerHTML = this.sanitize.sanitize(SecurityContext.HTML, this.markedContent);\n\n  }\n\n  markedRenderer() {\n    this.renderer.listitem = (text: any) => {\n      if (/^\\s*\\[[x ]\\]\\s*/.test(text)) {\n        text = text\n          .replace(/^\\s*\\[ \\]\\s*/, '<i class=\"fa fa-square-o\" style=\"margin: 0 0.2em 0.25em -1.6em;\"></i> ')\n          .replace(/^\\s*\\[x\\]\\s*/, '<i class=\"fa fa-check-square\" style=\"margin: 0 0.2em 0.25em -1.6em;\"></i> ');\n        return `<li style=\"list-style: none;\">${text}</li>`;\n      } else {\n        return `<li>${text}</li>`;\n      }\n    };\n    this.renderer.table = (header: string, body: string) => {\n      return `<table class=\"table table-bordered\">\\n<thead>\\n${header}</thead>\\n<tbody>\\n${body}</tbody>\\n</table>\\n`;\n    };\n\n    marked.setOptions({\n      highlight: function (code) {\n        return hljs.highlightAuto(code).value;\n      },\n      renderer: this.renderer,\n      tables: true,\n      sanitize: false,\n      smartLists: true,\n\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { YKEditorComponent } from './ykeditor/ykeditor.component';\nimport { MarkdownDirective } from './markdown.directive';\nimport { CommonModule } from \"@angular/common\";\nimport { AngularResizedEventModule } from 'angular-resize-event';\n@NgModule({\n  imports: [\n    CommonModule,\n    AngularResizedEventModule\n  ],\n  declarations: [ YKEditorComponent, MarkdownDirective],\n  exports: [YKEditorComponent,MarkdownDirective]\n})\nexport class YkEditorModule { }\n"]}